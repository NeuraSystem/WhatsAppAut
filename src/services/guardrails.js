// src/services/guardrails.js

const { RunnableSequence } = require("@langchain/core/runnables");
const { PromptTemplate } = require("@langchain/core/prompts");
const { StringOutputParser } = require("@langchain/core/output_parsers");
const { initializeEmbeddingEngine } = require('./embeddingEngine');
const logger = require('../utils/logger');
const config = require('../utils/config');

class Guardrails {
    constructor(llm) {
        this.llm = llm;
        this.validationChain = this.createValidationChain();
        logger.info('üõ°Ô∏è Guardrails inicializados con cadena de validaci√≥n LCEL.');
    }

    createValidationChain() {
        const validationTemplate = `
            Eres un sistema de validaci√≥n de respuestas para un bot de reparaciones de celulares.
            Eval√∫a la siguiente respuesta generada por el bot en el contexto de la consulta del usuario.
            Consulta del usuario: "{userQuery}"
            Respuesta del bot: "{agentResponse}"

            Realiza las siguientes comprobaciones:
            1.  **Toxicidad**: ¬øLa respuesta es t√≥xica, ofensiva o inapropiada? (S√≠/No)
            2.  **Fuera de Tema**: ¬øLa respuesta se desv√≠a del tema de reparaciones de celulares, precios, o informaci√≥n del negocio? (S√≠/No)
            3.  **Opiniones Personales**: ¬øLa respuesta contiene opiniones personales como "creo que" o "en mi opini√≥n"? (S√≠/No)
            4.  **Promesas Falsas**: ¬øLa respuesta garantiza algo que no puede cumplir, como "100% seguro" o "garantizado"? (S√≠/No)
            5.  **Solicitud de Informaci√≥n Sensible**: ¬øLa respuesta pide informaci√≥n sensible como contrase√±as o datos bancarios? (S√≠/No)

            Formato de salida:
            Toxicidad: [S√≠/No]
            Fuera de Tema: [S√≠/No]
            Opiniones Personales: [S√≠/No]
            Promesas Falsas: [S√≠/No]
            Solicitud de Informaci√≥n Sensible: [S√≠/No]
            Veredicto: [PASA/FALLA]
            Raz√≥n: [Explica brevemente por qu√© FALLA, o "N/A" si PASA]
        `;

        const validationPrompt = new PromptTemplate({
            template: validationTemplate,
            inputVariables: ["userQuery", "agentResponse"],
        });

        return RunnableSequence.from([
            validationPrompt,
            this.llm,
            new StringOutputParser(),
        ]);
    }

    async processResponse(agentResponse, userQuery) {
        if (agentResponse.length > config.guardrails.responseMaxLength) {
            logger.warn(`Guardrail VIOLATION: La respuesta excede la longitud m√°xima de ${config.guardrails.responseMaxLength} caracteres.`);
            return "La respuesta es demasiado larga. Por favor, s√© m√°s conciso.";
        }

        try {
            const validationResult = await this.validationChain.invoke({
                userQuery,
                agentResponse,
            });

            const verdict = this.parseVerdict(validationResult);

            if (verdict.veredicto === 'FALLA') {
                logger.warn(`Guardrail VIOLATION: ${verdict.razon} for query: "${userQuery}"`);
                return "Disculpa, no puedo responder a eso. Por favor, intenta con otra pregunta.";
            }

            return agentResponse;
        } catch (error) {
            logger.error('Error durante la validaci√≥n de guardrails:', error);
            // En caso de error en la validaci√≥n, ser conservador y no enviar la respuesta.
            return "Hubo un problema al validar la respuesta. Int√©ntalo de nuevo.";
        }
    }

    parseVerdict(validationResult) {
        const lines = validationResult.split('\n');
        const result = {};
        lines.forEach(line => {
            const parts = line.split(':');
            if (parts.length === 2) {
                const key = parts[0].trim();
                const value = parts[1].trim();
                result[key] = value;
            }
        });

        return {
            veredicto: result.Veredicto || 'FALLA',
            razon: result.Raz√≥n || 'No se pudo parsear el veredicto.',
        };
    }
}

module.exports = { Guardrails };
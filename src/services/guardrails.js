// src/services/guardrails.js

const logger = require('../utils/logger');
const config = require('../utils/config'); // Importar la configuraci√≥n centralizada

/**
 * Clase Guardrails para filtrar y validar las respuestas del agente.
 * Asegura que las respuestas cumplan con las reglas de negocio y √©tica.
 */
class Guardrails {
    constructor() {
        // Las reglas ahora usan la configuraci√≥n externa
        this.rules = [
            this.checkNoPromises.bind(this),
            this.checkNoToxicity.bind(this),
            this.checkNoOffTopic.bind(this),
            this.checkNoPersonalOpinions.bind(this),
            this.checkNoSensitiveInfoRequest.bind(this),
            this.checkResponseLength.bind(this),
        ];
        logger.info('üõ°Ô∏è Guardrails inicializados con reglas de validaci√≥n desde la configuraci√≥n central.');
    }

    /**
     * Procesa la respuesta del agente a trav√©s de todas las reglas de guardarra√≠l.
     * @param {string} agentResponse - La respuesta generada por el agente.
     * @param {string} userQuery - La consulta original del usuario (para contexto).
     * @returns {string} La respuesta filtrada o una respuesta de fallback si se viola una regla cr√≠tica.
     */
    processResponse(agentResponse, userQuery) {
        let filteredResponse = agentResponse;
        let violations = [];

        for (const rule of this.rules) {
            const result = rule(filteredResponse, userQuery);
            if (result.violation) {
                violations.push(result.message);
                // Si es una violaci√≥n cr√≠tica, devolvemos un fallback inmediato
                if (result.critical) {
                    logger.warn(`CRITICAL GUARDRAIL VIOLATION: ${result.message} for query: "${userQuery}"`);
                    return "Disculpa, no puedo responder a eso. Por favor, intenta con otra pregunta.";
                }
            }
        }

        if (violations.length > 0) {
            logger.warn(`Guardrail violations detected for query: "${userQuery}": ${violations.join('; ')}`);
            // Aqu√≠ podr√≠amos ajustar la respuesta o simplemente loguear la violaci√≥n
        }

        return filteredResponse;
    }

    /**
     * Regla: No prometer cosas que el bot no puede garantizar.
     * @param {string} response
     * @returns {{violation: boolean, message: string, critical: boolean}}
     */
    checkNoPromises(response) {
        if (config.guardrails.noPromises.some(keyword => keyword.test(response))) {
            return { violation: true, message: 'Respuesta contiene promesas no garantizadas.', critical: false };
        }
        return { violation: false };
    }

    /**
     * Regla: No ser t√≥xico, ofensivo o inapropiado.
     * @param {string} response
     * @returns {{violation: boolean, message: string, critical: boolean}}
     */
    checkNoToxicity(response) {
        if (config.guardrails.noToxicity.some(keyword => keyword.test(response))) {
            return { violation: true, message: 'Respuesta contiene lenguaje t√≥xico.', critical: true };
        }
        return { violation: false };
    }

    /**
     * Regla: Mantenerse en el tema del negocio (reparaci√≥n de celulares).
     * @param {string} response
     * @param {string} userQuery
     * @returns {{violation: boolean, message: string, critical: boolean}}
     */
    checkNoOffTopic(response, userQuery) {
        // L√≥gica simple mejorada para detectar si el tema es de negocio o no
        const isBusinessRelated = config.guardrails.businessKeywords.some(keyword => keyword.test(response) || keyword.test(userQuery));
        const isClearlyOffTopic = config.guardrails.offTopicKeywords.some(keyword => keyword.test(response));

        if (isClearlyOffTopic && !isBusinessRelated) {
            return { violation: true, message: 'Respuesta fuera de tema.', critical: false };
        }
        return { violation: false };
    }

    /**
     * Regla: No expresar opiniones personales.
     * @param {string} response
     * @returns {{violation: boolean, message: string, critical: boolean}}
     */
    checkNoPersonalOpinions(response) {
        if (config.guardrails.noPersonalOpinions.some(keyword => keyword.test(response))) {
            return { violation: true, message: 'Respuesta contiene opini√≥n personal.', critical: false };
        }
        return { violation: false };
    }

    /**
     * Regla: No solicitar informaci√≥n sensible (ej. contrase√±as, datos bancarios).
     * @param {string} response
     * @returns {{violation: boolean, message: string, critical: boolean}}
     */
    checkNoSensitiveInfoRequest(response) {
        if (config.guardrails.noSensitiveInfoRequest.some(keyword => keyword.test(response))) {
            return { violation: true, message: 'Respuesta solicita informaci√≥n sensible.', critical: true };
        }
        return { violation: false };
    }

    /**
     * Regla: Limitar la longitud de la respuesta para mantenerla concisa.
     * @param {string} response
     * @returns {{violation: boolean, message: string, critical: boolean}}
     */
    checkResponseLength(response) {
        const maxLength = config.guardrails.maxLength;
        if (response.length > maxLength) {
            return { violation: true, message: `Respuesta excede la longitud m√°xima de ${maxLength} caracteres.`, critical: false };
        }
        return { violation: false };
    }
}

module.exports = { Guardrails };